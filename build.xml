<?xml version='1.0'?>

<!--
Copyright 2011, 10gen

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at:

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<project name="mongo-java-driver" default="compile" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

    <!-- ******************************************************************* -->
    <!-- Set the ivy attributes.                                            -->
    <!-- ******************************************************************* -->

    <property name="ivy.install.version" value="2.2.0" />
    <property name="ivy.home" value="${user.home}/.ant" />
    <property name="ivy.jar.dir" value="${ivy.home}/lib" />
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />
    <available file="${ivy.jar.file}" property="ivy-exists" />

    <!-- ******************************************************************* -->
    <!-- The download-ivy target.                                            -->
    <!-- ******************************************************************* -->

    <target name="download-ivy" unless="ivy-exists">
        <mkdir dir="${ivy.jar.dir}"/>
        <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
             dest="${ivy.jar.file}"
             usetimestamp="true"/>
    </target>

    <!-- ******************************************************************* -->
    <!-- The init-ivy target.                                                -->
    <!-- ******************************************************************* -->

    <target name="init-ivy" depends="download-ivy">
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant"
                 classpathref="ivy.lib.path"/>
    </target>

    <!-- ******************************************************************* -->
    <!-- Set the base attributes.                                            -->
    <!-- ******************************************************************* -->

    <property environment="env"/>
    <property file="build.properties" prefix="build.conf"/>

    <property name="targetdir" location="target"/>
    <property name="testdir" location="${targetdir}/test"/>
    <dirname property="javabase" file="${java.home}"/>

    <property name="test.com.mongodb.slaveAcceptableLatencyMS" value="15"/>

    <path id="build.path">
        <pathelement path="conf" />
        <pathelement path="build/main" />
        <pathelement path="build/test" />
        <pathelement path="${javabase}/lib/tools.jar" />
    </path>


    <!-- ******************************************************************* -->
    <!-- The resolve target.                                                 -->
    <!-- ******************************************************************* -->

    <target name="resolve" depends="init-ivy" description="retrieve dependencies with ivy">
        <ivy:retrieve/>
        <ivy:cachepath pathid="test.path" conf="test"/>
        <ivy:cachepath pathid="cobertura.path" conf="cobertura"/>
        <ivy:cachepath pathid="tasks.path" conf="tasks"/>
    </target>

    <!-- ******************************************************************* -->
    <!-- The init target.                                                    -->
    <!-- ******************************************************************* -->

    <target name="init" depends="resolve">
        <!-- Create dirs-->
        <mkdir dir="build" />
        <mkdir dir="build/main" />
        <mkdir dir="build/test" />
        <mkdir dir="build/util" />
        <mkdir dir="logs" />
        <mkdir dir="${testdir}" />

        <!-- Define tasks-->
        <taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="tasks.path"/>
        <taskdef name="testng" classname="org.testng.TestNGAntTask" classpathref="tasks.path"/>
        <taskdef resource="clirrtask.properties" classpathref="tasks.path"/>
        <taskdef resource="tasks.properties" classpathref="cobertura.path"/>
    </target>

    <!-- ******************************************************************* -->
    <!-- The clean target.                                                   -->
    <!-- ******************************************************************* -->

    <target name="clean">
        <delete dir="build"/>
        <delete dir="target"/>
        <delete dir="docs"/>
        <delete dir="logs"/>
        <delete file="mongo.jar"/>
        <delete file="mongo-javadoc.jar"/>
        <delete file="mongo-sources.jar"/>
        <delete file="bson.jar"/>
        <delete file="bson-javadoc.jar"/>
        <delete file="bson-sources.jar"/>
    </target>

    <!-- ******************************************************************* -->
    <!-- The compile target.                                                 -->
    <!-- ******************************************************************* -->

    <target name="compile" depends="init">

        <propertyregex property="lib.major"
                       input="${build.conf.lib.version}"
                       regexp="(\d+)\.(\d+)\.(\d+)"
                       select="\1" />

        <propertyregex property="lib.minor"
                       input="${build.conf.lib.version}"
                       regexp="(\d+)\.(\d+)\.(\d+)"
                       select="\2" />

        <replaceregexp file="src/main/com/mongodb/Mongo.java" match="\sMAJOR_VERSION\s=\s\d+;" replace=" MAJOR_VERSION = ${lib.major};" byline="false"/>
        <replaceregexp file="src/main/com/mongodb/Mongo.java" match="\sMINOR_VERSION\s=\s\d+;" replace=" MINOR_VERSION = ${lib.minor};" byline="false"/>
        <replaceregexp file="src/main/com/mongodb/Mongo.java" match='\sFULL_VERSION\s=\s"\S*";'
                       replace=' FULL_VERSION = "${build.conf.lib.version}";' byline="false"/>

        <javac
            srcdir="src/main"
            destdir="build/main"
            optimize="off"
            deprecation="off"
            source="${build.conf.javac.source}"
            target="${build.conf.javac.source}"
            encoding="ISO-8859-1"
            memoryMaximumSize="256M"
            fork="true"
            debug="on"
            includeantruntime="false">
            <compilerarg value="-Xlint:all,-rawtypes"/>
            <classpath refid="build.path"/>
        </javac>

        <javac
            srcdir="src/test"
            destdir="build/test"
            optimize="off"
            deprecation="off"
            source="${build.conf.javac.source}"
            encoding="ISO-8859-1"
            fork="true"
            debug="on"
            includeantruntime="false">
            <classpath refid="build.path"/>
            <classpath refid="test.path"/>
            <compilerarg value="-Xlint:all,-rawtypes"/>
        </javac>

    </target>

    <!-- ******************************************************************* -->
    <!-- The util compile target.                                            -->
    <!-- ******************************************************************* -->

    <target name="utilcompile" depends="compile">

        <javac
            srcdir="src/util"
            destdir="build/util"
            optimize="off"
            deprecation="off"
            source="${build.conf.javac.source}"
            target="${build.conf.javac.source}"
            encoding="ISO-8859-1"
            memoryMaximumSize="256M"
            fork="true"
            debug="on"
            includeantruntime="false">
            <classpath refid="build.path"/>
            <compilerarg value="-Xlint:all,-fallthrough"/>
        </javac>
    </target>

    <!-- ******************************************************************* -->
    <!-- The jar target.                                                     -->
    <!-- ******************************************************************* -->

    <target name="jar" depends="compile" description="Create driver jar">

        <copy file="src/main/META-INF/MANIFEST.MF" tofile="build/MANIFEST.MF" filtering="true">
            <filterset><filter token="VERSION" value="${build.conf.lib.version.osgi.compat}"/></filterset>
        </copy>

        <copy file="src/main/META-INF/MANIFEST_BSON.MF" tofile="build/MANIFEST_BSON.MF" filtering="true">
            <filterset><filter token="VERSION" value="${build.conf.lib.version.osgi.compat}"/></filterset>
        </copy>

        <exec executable="git" output="build/main/git-hash">
            <arg value="log" />
            <arg value="--pretty=format:%H" />
            <arg value="-1" />
        </exec>

        <jar jarfile="mongo.jar" manifest="build/MANIFEST.MF"><fileset dir="build/main" /></jar>

        <jar jarfile="bson.jar" manifest="build/MANIFEST_BSON.MF">
          <fileset dir="build/main"><not><filename name="com/"/></not></fileset>
        </jar>

    </target>

    <!-- ******************************************************************* -->
    <!-- The javadocs target.                                                -->
    <!-- ******************************************************************* -->

    <target name="javadocs" depends="compile,utilcompile" description="Generate API docs">
        <delete dir="docs/"/>
        <javadoc
            packagenames="com.mongodb,com.mongodb.gridfs,com.mongodb.util,com.mongodb.tools,org.bson,org.bson.types,org.bson.io,org.bson.util"
            sourcepath="src/main/"
            defaultexcludes="yes"
            destdir="docs/mongo-java-driver"
            author="true"
            version="true"
            source="${build.conf.javac.source}"
            use="true"
            access="protected">
            <link href="http://download.oracle.com/javase/1.5.0/docs/api/"/>
            <classpath refid="build.path"/>
            <taglet name="DochubTaglet" path="build/util"/>
            <taglet name="ManualTaglet" path="build/util"/>
        </javadoc>

        <javadoc
            packagenames="org.bson,org.bson.types,org.bson.io,org.bson.util"
            sourcepath="src/main/"
            defaultexcludes="yes"
            destdir="docs/bson"
            author="true"
            version="true"
            source="${build.conf.javac.source}"
            use="true"
            access="protected">
            <link href="http://download.oracle.com/javase/1.5.0/docs/api/"/>
            <classpath refid="build.path"/>
            <taglet name="DochubTaglet" path="build/util"/>
            <taglet name="ManualTaglet" path="build/util"/>
        </javadoc>

    </target>

    <!-- ******************************************************************* -->
    <!-- Jar the rest of the files.                                          -->
    <!-- ******************************************************************* -->

    <target name="alljars" depends="jar, javadocs" description="build jar, source jar, javadoc jar">

        <jar jarfile="mongo-sources.jar"><fileset dir="src/main"><not><filename name="META-INF/"/></not></fileset></jar>
        <jar jarfile="mongo-javadoc.jar"><fileset dir="docs/mongo-java-driver"/></jar>

        <jar jarfile="bson-sources.jar">
            <fileset dir="src/main">
            <not><filename name="com/"/></not>
            <not><filename name="META-INF/"/></not>
            </fileset>
        </jar>

        <jar jarfile="bson-javadoc.jar"><fileset dir="docs/bson"/></jar>

    </target>

    <!-- ******************************************************************* -->
    <!-- The clean compile target                                            -->
    <!-- ******************************************************************* -->

    <target name="rebuild" depends="clean, compile"/>

    <!-- ******************************************************************* -->
    <!-- The test targets                                                    -->
    <!-- ******************************************************************* -->

    <target name="test" depends="compile">
        <testng outputdir="${testdir}" listeners="com.mongodb.util.TestNGListener" haltonfailure="true" >
            <classpath refid="build.path"/>
            <classpath refid="test.path"/>
            <jvmarg value="-Xmx512M" />
            <jvmarg value="-ea" />
            <jvmarg value="-Dcom.mongodb.slaveAcceptableLatencyMS=${test.com.mongodb.slaveAcceptableLatencyMS}"/>

            <xmlfileset dir="." includes="testng.xml"/>
        </testng>
    </target>


    <target name="test-single" depends="compile">
        <condition property="propsSpecified">
            <and>
                <isset property="class.name" />
            </and>
        </condition>

        <fail unless="propsSpecified" message="class.name property not specified."/>

        <copy todir="build/test" file="testng-single.xml" overwrite="true">
            <filterset><filter token="CLASS" value="${class.name}"/></filterset>
        </copy>

        <testng outputdir="${testdir}" haltonfailure="true" verbose="1" listeners="com.mongodb.util.TestNGListener" >
            <classpath refid="build.path"/>
            <classpath refid="test.path"/>
            <jvmarg value="-Xmx512M" />
            <jvmarg value="-ea" />
            <jvmarg value="-Dcom.mongodb.slaveAcceptableLatencyMS=${test.com.mongodb.slaveAcceptableLatencyMS}"/>
            <xmlfileset dir="build/test" includes="testng-single.xml"/>
        </testng>
    </target>

    <!-- ******************************************************************* -->
    <!-- Misc targets                                                        -->
    <!-- ******************************************************************* -->

    <target name="examples" depends="compile">

        <javac
            srcdir="examples"
            destdir="build/test"
            optimize="off"
            deprecation="off"
            source="${build.conf.javac.source}"
            encoding="ISO-8859-1"
            debug="on"
            includeantruntime="false">
            <classpath refid="build.path"/>
        </javac>

        <java classname="QuickTour"><classpath refid="build.path"/></java>

        <java classname="QuickTourAdmin"><classpath refid="build.path"/></java>

    </target>

    <target name="readoplog" depends="compile">

        <javac
            srcdir="examples"
            destdir="build/test"
            optimize="off"
            deprecation="off"
            source="${build.conf.javac.source}"
            encoding="ISO-8859-1"
            debug="on"
            includeantruntime="false">
            <classpath refid="build.path"/>
        </javac>

        <java classname="examples.ReadOplog" fork="true"><classpath refid="build.path"/></java>

    </target>

    <!-- ******************************************************************* -->
    <!-- The reporting targets                                               -->
    <!-- ******************************************************************* -->

    <target name="junit-reports" depends="compile">
        <testng outputdir="${testdir}" listeners="com.mongodb.util.TestNGListener" haltonfailure="false" >
            <classpath refid="build.path"/>
            <classpath refid="test.path"/>
            <jvmarg value="-Xmx512M" />
            <xmlfileset dir="." includes="testng.xml"/>
        </testng>
        <junitreport todir="${testdir}">
            <fileset dir="${testdir}"><include name="*/*.xml"/></fileset>
            <report format="noframes"  todir="${testdir}"/>
        </junitreport>
    </target>

    <target name="jenkins-test" depends="compile">
        <testng outputdir="${testdir}" listeners="com.mongodb.util.TestNGListener" haltonfailure="false" verbose="1">
            <classpath refid="build.path"/>
            <classpath refid="test.path"/>
            <jvmarg value="-Xmx512M" />
            <jvmarg value="-ea" />
            <jvmarg value="-Dcom.mongodb.slaveAcceptableLatencyMS=${test.com.mongodb.slaveAcceptableLatencyMS}"/>
            <xmlfileset dir="." includes="testng.xml"/>
        </testng>
    </target>

    <target name="jenkins-test-coverage" depends="compile">

        <cobertura-instrument todir="build/instrumented" datafile="${targetdir}/cobertura.ser">
            <fileset dir="build/main">
                <include name="**/*.class"/>
            </fileset>
        </cobertura-instrument>

        <testng outputdir="${testdir}" listeners="com.mongodb.util.TestNGListener" haltonfailure="false" verbose="1">
            <classpath location="build/instrumented"/>
            <classpath refid="build.path"/>
            <classpath refid="test.path"/>
            <classpath refid="cobertura.path"/>
            <sysproperty key="net.sourceforge.cobertura.datafile" file="${targetdir}/cobertura.ser" />
            <jvmarg value="-Xmx512M"/>
            <xmlfileset dir="." includes="testng.xml"/>
        </testng>
        <cobertura-report format="xml" srcdir="src/main" destdir="${testdir}" datafile="${targetdir}/cobertura.ser"/>
    </target>


    <target name="check-binary-compatibility" depends="jar">

        <property name="jar.baseline" value="mongo-${build.conf.compatibility.baseline.version}.jar"/>

        <get src="${build.conf.url.libbase}/${ant.project.name}/${jar.baseline}" dest="${jar.baseline}"
             verbose="true" usetimestamp="true"/>

        <clirr failOnBinError="no" failOnSrcError="no">
            <origfiles dir="." includes="${jar.baseline}"/>
            <newfiles dir="." includes="mongo.jar"/>
            <formatter type="plain" outfile="build/clirr.txt"/>
        </clirr>
    </target>

  <!-- NOTE: publish-local is now located in maven/ -->

</project>