/*
 * Copyright (c) 2008 - 2013 10gen, Inc. <http://10gen.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

def configDir = new File(rootDir, 'config')

//////////////////////////////////////////
// Common behavior                      //
//////////////////////////////////////////

allprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'findbugs'
    apply plugin: 'osgi'
    apply plugin: 'jacoco'
    apply plugin: 'maven'
    apply plugin: 'signing'


    group = 'org.mongodb'
    version = '3.0.0-SNAPSHOT'
    project.ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
    sourceCompatibility = '1.6'
    targetCompatibility = '1.6'

    repositories {
        mavenCentral()
    }

    dependencies {
        testCompile 'junit:junit:4.11'
    }

    sourceSets {
        main { java.srcDirs = ['src/main'] }
        test { java.srcDirs = ['src/test'] }
    }

    /* Compiling */
    tasks.withType(Compile) {
        options.encoding = 'ISO-8859-1'
        options.fork = true
        options.debug = true
        options.compilerArgs = ['-Xlint:all', '-Xlint:-options']

        onlyIf { JavaVersion.current().isJava7Compatible() }
    }

    /* Testing */
    tasks.withType(Test) {
        maxParallelForks = 1
        systemProperties(
                'org.mongodb.test.uri': System.getProperty('org.mongodb.test.uri', null),
                'org.mongodb.useSocket': System.getProperty('org.mongodb.useSocket', "false"),
                'org.mongodb.disableAsync': System.getProperty('org.mongodb.disableAsync', "false")
        )

        if (project.hasProperty('ssl.enabled') && project.property('ssl.enabled').toBoolean()) {
            systemProperties(
                    'javax.net.ssl.keyStoreType': project.property('ssl.keyStoreType'),
                    'javax.net.ssl.keyStore': project.property('ssl.keyStore'),
                    'javax.net.ssl.keyStorePassword': project.property('ssl.keyStorePassword'),
                    'javax.net.ssl.trustStoreType': project.property('ssl.trustStoreType'),
                    'javax.net.ssl.trustStore': project.property('ssl.trustStore'),
                    'javax.net.ssl.trustStorePassword': project.property('ssl.trustStorePassword')
            )

        }
        jacoco { enabled = false }

        beforeTest { descr ->
            logger.info("[Test ${descr.className} > ${descr.name}]")
        }
    }

    gradle.taskGraph.whenReady { taskGraph ->
        if (taskGraph.hasTask(tasks.getByName('check'))) {
            tasks.withType(Test) { jacoco { enabled = true } }
        }
    }

    /* Code quality */
    checkstyle {
        configFile = new File("$configDir/checkstyle.xml")
    }

    checkstyleMain {
        classpath += configurations.compile
    }

    checkstyleTest {
        classpath += configurations.testCompile
    }

    findbugs {
        ignoreFailures = true
        excludeFilter = new File("$configDir/findbugs-exclude.xml")
    }

    tasks.matching { (it instanceof FindBugs) || (it instanceof Pmd) }.all {
        reports {
            xml.enabled = project.hasProperty('xmlReportsEnabled')
            html.enabled = !project.hasProperty('xmlReportsEnabled')
        }
    }

    /* Artifacts */
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc
    }

    javadoc {
        options.author = true
        options.version = true
        options.links 'http://download.oracle.com/javase/1.5.0/docs/api/'
        options.tagletPath file("$rootDir/buildSrc/build/classes/main")
        options.taglets 'ManualTaglet'
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    signing {
        required { project.isReleaseVersion && gradle.taskGraph.hasTask("deploy") }
        sign configurations.archives
    }

    install {
        project.ext.installer = repositories.mavenInstaller
    }

    uploadArchives {
        project.ext.deployer = repositories.mavenDeployer {
            snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots')
            repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                if (project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {
                    authentication(
                            userName: project.property('sonatypeUsername'),
                            password: project.property('sonatypePassword')
                    )
                }
            }
        }
    }

    [project.installer, project.deployer]*.pom {

        project {
            scm {
                url 'https://github.com/mongodb/mongo-java-driver'
                connection 'scm:git:git://github.com/mongodb/mongo-java-driver'
            }

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    name 'Various'
                    organization '10gen'
                }
            }
        }

        whenConfigured { pom ->
            pom.dependencies.removeAll { dep -> dep.scope != 'compile' }
            pom.dependencies*.scope = null
        }
    }
}

//////////////////////////////////////////
// Project specific behavior            //
//////////////////////////////////////////

project(':bson') {

    jar {
        manifest {
            attributes(
                    'Bundle-License': 'http://www.apache.org/licenses/LICENSE-2.0.txt',
                    'Bundle-Name': 'BSON'
            )
        }
    }

    [project.installer, project.deployer]*.pom {
        project {
            name 'BSON'
            description 'The BSON libs'
            url 'http://bsonspec.org/'
        }

        whenConfigured { pom ->
            pom.dependencies.removeAll { true }
        }
    }
}

project(':driver') {

    sourceSets {
        test        { java.srcDirs = ['src/test/unit'] }
        acceptance  { java.srcDirs = ['src/test/acceptance'] }
        functional  { java.srcDirs = ['src/test/functional'] }
    }

    dependencies {
        compile             project(':bson')
        testCompile         'org.jmock:jmock-legacy:2.6.0'
        testCompile         'org.jmock:jmock-junit4:2.6.0'
        functionalCompile   sourceSets.test.runtimeClasspath
        acceptanceCompile   sourceSets.functional.runtimeClasspath
    }

    idea.module {
        testSourceDirs += project.sourceSets.functional.allSource.getSrcDirs()
        testSourceDirs += project.sourceSets.acceptance.allSource.getSrcDirs()
    }

    jar {
        from project(':bson').sourceSets.main.output
        manifest {
            attributes(
                    'Bundle-License': 'http://www.apache.org/licenses/LICENSE-2.0.txt',
                    'Bundle-Name': 'MongoDB Java Driver',
                    'Bundle-SymbolicName': 'org.mongodb.driver',
                    'Import-Package': 'javax.management, javax.net, javax.net.ssl',

            )
        }
    }

    task functionalTest(type: Test, dependsOn: test) {
        testClassesDir = sourceSets.functional.output.classesDir
        classpath = sourceSets.functional.runtimeClasspath
        useJUnit() {
            if (!JavaVersion.current().isJava7Compatible()
                    || (project.hasProperty('ssl.enabled') && project.property('ssl.enabled').toBoolean())) {
                excludeCategories 'category.Async'
            }
            if (!(project.hasProperty('rs.enabled') && project.property('rs.enabled').toBoolean())) {
                excludeCategories 'category.ReplicaSet'
            }
        }
    }

    task acceptanceTest(type: Test, dependsOn: functionalTest) {
        testClassesDir = sourceSets.acceptance.output.classesDir
        classpath = sourceSets.acceptance.runtimeClasspath
    }

    check.dependsOn acceptanceTest

    sourcesJar {
        from project(':bson').sourceSets.main.allSource
    }

    javadoc {
        source project(':bson').sourceSets.main.allJava
    }

    [project.installer, project.deployer]*.pom {
        project {
            name 'MongoDB Java Driver'
            description 'The MongoDB Java Driver'
            url 'http://www.mongodb.org'
        }

        whenConfigured { pom ->
            pom.dependencies.removeAll { true }
        }
    }
}

project(':driver-compat') {
    apply plugin: 'clirr'

    dependencies {
        compile project(':driver')
        testCompile project(':driver').sourceSets.test.output
        testCompile 'org.jmock:jmock-legacy:2.6.0'
        testCompile 'org.jmock:jmock-junit4:2.6.0'
    }

    clirr {
        formats = ['xml', 'html']
        baseline 'org.mongodb:mongo-java-driver:2.11.0'
        failOnBinError = false
        failOnSrcError = false
    }

    test {
        useJUnit() {
            if (!JavaVersion.current().isJava7Compatible()
                    || (project.hasProperty('ssl.enabled') && project.property('ssl.enabled').toBoolean())) {
                excludeCategories 'category.Async'
            }
            if (!(project.hasProperty('rs.enabled') && project.property('rs.enabled').toBoolean())) {
                excludeCategories 'category.ReplicaSet'
            }
        }
    }

    jar {
        from project(':bson').sourceSets.main.output
        from project(':driver').sourceSets.main.output
        manifest {
            attributes(
                    'Bundle-License': 'http://www.apache.org/licenses/LICENSE-2.0.txt',
                    'Bundle-Name': 'MongoDB Java Driver',
                    'Bundle-SymbolicName': 'org.mongodb.mongo-java-driver',
                    'Import-Package': 'javax.management, javax.net, javax.net.ssl'
            )
        }
    }

    sourcesJar {
        from project(':bson').sourceSets.main.allSource
        from project(':driver').sourceSets.main.allSource
    }

    javadoc {
        source project(':bson').sourceSets.main.allJava
        source project(':driver').sourceSets.main.allJava
    }

    [project.installer, project.deployer]*.pom {
        project {
            name 'MongoDB Java Driver'
            description 'The MongoDB Java Driver'
            url 'http://www.mongodb.org'
        }

        whenConfigured { pom ->
            pom.dependencies.removeAll { true }
        }
    }

    checkstyle {
        configFile = new File("$configDir/checkstyle-lite.xml")
    }

    pmd {
        //cut down version of PMD for the older code base
        ruleSets = ["braces"]
        ignoreFailures = false
    }

    idea.module.iml {
        withXml { provider ->

            def node = provider.node.component.find { it.@name == 'CheckStyle-IDEA-Module' }
            if (node == null) {
                node = provider.node.appendNode('component')
            }
            node.replaceNode {
                component(name: 'CheckStyle-IDEA-Module') {
                    option(name: 'configuration') {
                        map {
                            entry(key: 'active-configuration', value: 'FILE:$PROJECT_DIR$/config/checkstyle-lite.xml:Lite')
                        }
                    }
                }
            }

        }
    }
}

//////////////////////////////////////////
// Root project configuration           //
//////////////////////////////////////////
task wrapper(type: Wrapper) {
    gradleVersion = "1.6"
}

gradle.buildFinished { BuildResult result ->
    if (result.failure && !JavaVersion.current().isJava7Compatible())
        gradle.rootProject.logger.error("\n* Warning:\nJDK ${JavaVersion.VERSION_1_7} is minimal requirement for building the driver. You have ${JavaVersion.current()}.")
}

idea {
    project {
        languageLevel = '1.6'
        ipr {
            withXml { provider ->
                def mapping = provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping
                mapping.@vcs = 'Git'
                mapping.@directory = '$PROJECT_DIR$'

                def node = provider.node.component.find { it.@name == 'CheckStyle-IDEA-Module' } ?: provider.node.appendNode('component')
                node.replaceNode {
                    component(name: 'CheckStyle-IDEA') {
                        option(name: 'configuration') {
                            map {
                                entry(key: 'active-configuration', value: 'FILE:$PROJECT_DIR$/config/checkstyle.xml:Default')
                                entry(key: 'check-test-classes', value: true)
                                entry(key: 'check-nonjava-files', value: false)
                                entry(key: 'location-0', value: 'FILE:$PROJECT_DIR$/config/checkstyle.xml:Default')
                                entry(key: 'location-1', value: 'FILE:$PROJECT_DIR$/config/checkstyle-lite.xml:Lite')
                            }
                        }
                    }
                }

                node = provider.node.component.find { it.@name == 'CopyrightManager' } ?: provider.node.appendNode('component')
                node.replaceNode {
                    component(name: 'CopyrightManager', default: '10gen') {
                        copyright {
                            option(name: 'notice', value: 'Copyright (c) 2008 - \$today.year 10gen, Inc. <http://10gen.com>\n\nLicensed under the Apache License, Version 2.0 (the "License");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an "AS IS" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.')
                            option(name: 'keyword', value: 'Copyright')
                            option(name: 'allowReplaceKeyword', value: '')
                            option(name: 'myName', value: '10gen')
                            option(name: 'myLocal', value: true)
                        }
                        module2copyright {
                            element(module: 'Project Files', copyright: '10gen')
                        }
                        LanguageOptions(name: 'XML') {
                            option(name: 'fileTypeOverride', value: 1)
                            option(name: 'prefixLines', value: false)
                        }
                    }
                }
            }
            beforeMerged { project ->
                project.modulePaths.clear()
            }
        }
    }
}
